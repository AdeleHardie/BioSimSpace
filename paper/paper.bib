@article{ref-AMBER,
author = {Case, David A. and Cheatham III, Thomas E. and Darden, Tom and Gohlke, Holger and Luo, Ray and Merz Jr., Kenneth M. and Onufriev, Alexey and Simmerling, Carlos and Wang, Bing and Woods, Robert J.},
title = {The Amber biomolecular simulation programs},
journal = {Journal of Computational Chemistry},
volume = {26},
number = {16},
pages = {1668-1688},
keywords = {Amber, biomolecular simulation programs},
doi = {10.1002/jcc.20290},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.20290},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/jcc.20290},
abstract = {Abstract We describe the development, current features, and some directions for future development of the Amber package of computer programs. This package evolved from a program that was constructed in the late 1970s to do Assisted Model Building with Energy Refinement, and now contains a group of programs embodying a number of powerful tools of modern computational chemistry, focused on molecular dynamics and free energy calculations of proteins, nucleic acids, and carbohydrates. © 2005 Wiley Periodicals, Inc. J Comput Chem 26: 1668–1688, 2005},
year = {2005}
}

@article{ref-GROMACS,
title = "GROMACS: High performance molecular simulations through multi-level parallelism from laptops to supercomputers",
journal = "SoftwareX",
volume = "1-2",
pages = "19 - 25",
year = "2015",
issn = "2352-7110",
doi = "https://doi.org/10.1016/j.softx.2015.06.001",
url = "http://www.sciencedirect.com/science/article/pii/S2352711015000059",
author = "Mark James Abraham and Teemu Murtola and Roland Schulz and Szilárd Páll and Jeremy C. Smith and Berk Hess and Erik Lindahl",
keywords = "Molecular dynamics, GPU, SIMD, Free energy",
abstract = "GROMACS is one of the most widely used open-source and free software codes in chemistry, used primarily for dynamical simulations of biomolecules. It provides a rich set of calculation types, preparation and analysis tools. Several advanced techniques for free-energy calculations are supported. In version 5, it reaches new performance heights, through several new and enhanced parallelization algorithms. These work on every level; SIMD registers inside cores, multithreading, heterogeneous CPU–GPU acceleration, state-of-the-art 3D domain decomposition, and ensemble-level parallelization through built-in replica exchange and the separate Copernicus framework. The latest best-in-class compressed trajectory storage format is supported."
}

@article{ref-NAMD,
author = {Phillips, James C. and Braun, Rosemary and Wang, Wei and Gumbart, James and Tajkhorshid, Emad and Villa, Elizabeth and Chipot, Christophe and Skeel, Robert D. and Kalé, Laxmikant and Schulten, Klaus},
title = {Scalable molecular dynamics with NAMD},
journal = {Journal of Computational Chemistry},
volume = {26},
number = {16},
pages = {1781-1802},
keywords = {biomolecular simulation, molecular dynamics, parallel computing},
doi = {10.1002/jcc.20289},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.20289},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/jcc.20289},
abstract = {Abstract NAMD is a parallel molecular dynamics code designed for high-performance simulation of large biomolecular systems. NAMD scales to hundreds of processors on high-end parallel platforms, as well as tens of processors on low-cost commodity clusters, and also runs on individual desktop and laptop computers. NAMD works with AMBER and CHARMM potential functions, parameters, and file formats. This article, directed to novices as well as experts, first introduces concepts and methods used in the NAMD program, describing the classical molecular dynamics force field, equations of motion, and integration methods along with the efficient electrostatics evaluation algorithms employed and temperature and pressure controls used. Features for steering the simulation across barriers and for calculating both alchemical and conformational free energy differences are presented. The motivations for and a roadmap to the internal design of NAMD, implemented in C++ and based on Charm++ parallel objects, are outlined. The factors affecting the serial and parallel performance of a simulation are discussed. Finally, typical NAMD use is illustrated with representative applications to a small, a medium, and a large biomolecular system, highlighting particular features of NAMD, for example, the Tcl scripting language. The article also provides a list of the key features of NAMD and discusses the benefits of combining NAMD with the molecular graphics/sequence analysis software VMD and the grid computing/collaboratory software BioCoRE. NAMD is distributed free of charge with source code at www.ks.uiuc.edu. © 2005 Wiley Periodicals, Inc. J Comput Chem 26: 1781–1802, 2005},
year = {2005}
}

@article{ref-OPENMM,
    author = {Eastman, Peter AND Swails, Jason AND Chodera, John D. AND McGibbon, Robert T. AND Zhao, Yutong AND Beauchamp, Kyle A. AND Wang, Lee-Ping AND Simmonett, Andrew C. AND Harrigan, Matthew P. AND Stern, Chaya D. AND Wiewiora, Rafal P. AND Brooks, Bernard R. AND Pande, Vijay S.},
    journal = {PLOS Computational Biology},
    publisher = {Public Library of Science},
    title = {OpenMM 7: Rapid development of high performance algorithms for molecular dynamics},
    year = {2017},
    month = {07},
    volume = {13},
    url = {https://doi.org/10.1371/journal.pcbi.1005659},
    pages = {1-17},
    abstract = {OpenMM is a molecular dynamics simulation toolkit with a unique focus on extensibility. It allows users to easily add new features, including forces with novel functional forms, new integration algorithms, and new simulation protocols. Those features automatically work on all supported hardware types (including both CPUs and GPUs) and perform well on all of them. In many cases they require minimal coding, just a mathematical description of the desired function. They also require no modification to OpenMM itself and can be distributed independently of OpenMM. This makes it an ideal tool for researchers developing new simulation methods, and also allows those new methods to be immediately available to the larger community.},
    number = {7},
    doi = {10.1371/journal.pcbi.1005659}
}

@misc{ref-SIRE,
    author = "{Woods, Christopher J.}",
    title = {Sire: An advanced, multiscale, molecular simulation framework},
    year = "2013",
    howpublished = "\url{http://siremol.org}",
    note = "[Online; accessed 22-October-2019]"
}

@article{ref-INTERMOL,
  title={Lessons learned from comparing molecular dynamics engines on the SAMPL5 dataset},
  author={Shirts, Michael R and Klein, Christoph and Swails, Jason M and Yin, Jian and Gilson, Michael K and Mobley, David L and Case, David A and Zhong, Ellen D},
  journal={Journal of computer-aided molecular design},
  pages={1--15},
  year={2016},
  doi={doi:10.1007/s10822-016-9977-1},
  publisher={Springer International Publishing}
}

@InProceedings{ref-MDANALYSIS,
  author    = { {R}ichard {J}. {G}owers and {M}ax {L}inke and {J}onathan {B}arnoud and {T}yler {J}. {E}. {R}eddy and {M}anuel {N}. {M}elo and {S}ean {L}. {S}eyler and {J}an {D}omański and {D}avid {L}. {D}otson and {S}ébastien {B}uchoux and {I}an {M}. {K}enney and {O}liver {B}eckstein },
  title     = { {M}{D}{A}nalysis: {A} {P}ython {P}ackage for the {R}apid {A}nalysis of {M}olecular {D}ynamics {S}imulations },
  booktitle = { {P}roceedings of the 15th {P}ython in {S}cience {C}onference },
  pages     = { 98 - 105 },
  year      = { 2016 },
  editor    = { {S}ebastian {B}enthall and {S}cott {R}ostrup },
  doi       = { 10.25080/Majora-629e541a-00e }
}

@article{ref-CUBY,
author = {Řezáč, Jan},
title = {Cuby: An integrative framework for computational chemistry},
journal = {Journal of Computational Chemistry},
volume = {37},
number = {13},
pages = {1230-1237},
keywords = {software framework, workflow automation, QM/MM, datasets, Ruby},
doi = {10.1002/jcc.24312},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.24312},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/jcc.24312},
abstract = {Cuby is a computational chemistry framework written in the Ruby programming language. It provides unified access to a wide range of computational methods by interfacing external software and it implements various protocols that operate on their results. Using structured input files, elementary calculations can be combined into complex workflows. For users, Cuby provides a unified and userfriendly way to automate their work, seamlessly integrating calculations carried out in different computational chemistry programs. For example, the QM/MM module allows combining methods across the interfaced programs and the builtin molecular dynamics engine makes it possible to run a simulation on the resulting potential. For programmers, it provides high-level, object-oriented environment that allows rapid development and testing of new methods and computational protocols. The Cuby framework is available for download at http://cuby4.molecular.cz. © 2016 Wiley Periodicals, Inc.},
year = {2016}
}
